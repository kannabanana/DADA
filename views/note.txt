<p>
Malware has a variety of attack vectors through which it infiltrates computers. For example, some common channels include email, IM, compromised sites & servers, malvertising, physical access (USB), etc, social engineering such as social media, IM, email, 
exploitation through watering hole attacks, malvertising, physical access, or a combination for poisoned search results. The extent of social engineering includes inadvertently running an executable, exploitation includes browser-based exploit kits such as script, pdf, and java. Features such as USB and physical access are often also abused in malware. 
</p>
<br>

<p>
	Typically the first point of contact is through spam, networks, web or physical access. These can be prevented through anti-spam, firewall, network ISP, IP, Domain and URL reputation, and disk encryption. Similarly, local execution and malware with an established presence can take place through spam, network web and hosts. These can be prevented through client-side content filtering, network IPS, content scanning, antivirus, whitelisting etc. In the event of malicious activity, typically hosts, networks, web and data loss are typically experienced which can be mitigated through anti-virus, NIPS, firewall, domain, url rep and content filtering etc. 
</p>
<br>
<p>

	Oftentimes from threats, we can see that the firewall, network reputation, anit-spam, web reputation, exploit prevention, system policies, application/access control, anti-malware and data loss prevention are all common malware defense techniques. In fact, most companies are starting to use a central point which gathers intelligence from all of these sources to create a holistic picture of the malware. This is essential, because it’s important to anticipate the threat going and not releasing new content or updates. 
</p>
<br>
<p>
	One common way to identify malware is to use the pattern matching  yara software. Yara supplies an IDE to write our “rules”, which can either be written by us or generated. The malware is browsed and analyzed based on the rules. We used Yara in our labs to dissect the different malware samples. Craig recommended making our own rules instead of the generated ones, because then everything would be highlighted and we wouldn't gain any insight. He also recommended examining samples using fileinsight to predict variants. Common issues to consider with malware is signatures while shipping and false positives. 
</p>
<br>
<p>
	
	During our lab we could execute in command line using yara.exe and include number of threads and timeout. All the files were located under the c:\Users\Admin\desktop\Tools\malware\Malware defense folder. There are seven samples under the Sytro directory. I tried to execute the example BadBoy script, but after it compiled and executed there were no matches. I also tried to writing a modified BadBoy rule which included the directory to the malicious file directory (c:\Users\Admin\desktop\Tools\malware\Malware defense\Class1\Samplegroup1\Sytro). However, writing out the entire directory wasn’t helpful either. Even commenting out and rename a few of the sample files to find a match didn’t yield any results. From the lab, I saw that there must be extremely good training sets to prevent false positives and give you good rules. Dissecting the samples further, there were two distinct groups: loaded six link libraries  (unable to run program name) and three link library (distinctive public keys). 
</p>
<br>
<p>
	We also explored the another malware analysis software, cuckoo in our second lab. Cuckoo analyzes samples inside a VM and can analyze malicious files, trace api calls, dump (encrypted)  network traffic, and advanced memory analysis. This is a fairly effective solution because physical machine throughput less effective than virtual and cuckoo can handle a lot of different executables. 
</p>
<br>
